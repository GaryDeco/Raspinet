#!/bin/bash

###########################################################################################
# Author: Gary Decosmo
# Date created: 2/19/2022
# Updated: 3/10/2022
# Description: Install script for raspinet scanner
# This script needs refinement, it has been tested and is working. 
# run this script on a fresh install of a raspbian OS to build the scanner enviornment. 
###########################################################################################

echo "
Built on ...

PRETTY_NAME = Raspbian GNU/Linux 10 (buster)
NAME = Raspbian GNU/Linux 
VERSION_ID = 10 
VERSION = 10 (buster) 
VERSION_CODENAME = buster
ID = raspbian
ID_LIKE = debian
HOME_URL = http://www.raspbian.org/ 

         ;d0KOd.  .oOK0x:  
        0xlllcoxolkolllloX 
        ;OccloddKNdxdocckc 
          .dkddkWNNMOdoxd,  
          .o:,x0....xd,ck'  
          K:xOoloOOccloocW  
        .x;N:....xO....'K;k,
        O..Nc...:XNl...:X.,X
        .kkx0NXk'...dNNxldK'
          'k...0o....,O...d: 
          ;o;'oM0olkWc.;oc  
            .cOx....dOl.    
                .x00k.  

"
#################### SETUP ###############################
# for convenience
spacer(){
  echo ""; sleep 1
}

TZ="America/Detroit"
KBMODEL="pc101"
KBLAYOUT="us"
KBOPTIONS="lv3:ralt_alt"
DEF_USER="pi"
PASSWD="campbell"
HOSTNAME="raspinet"
CONFIG=/boot/config.txt # main config file
ARCH=$(dpkg --print-architecture)

# try to determine OS architecture
if [ "$ARCH" = "armhf" ]; then
  OS_ARCH="32-bit"
elif [ "$ARCH" = "arm64" ]; then
  OS_ARCH="64-bit"
else
  OS_ARCH="Unkown"
fi

echo "
Note: After configuration is complete, bluetooth and wifi will be disabled
System will auto-reboot at completion...
"
spacer
#--- Ensure this is being run as root ---#
if [[ $EUID > 0 ]]
        then echo "Please run this script as root, exiting..."
        sleep 1
        exit
fi

echo "===> Getting system info..."
#--- Display some system info --#
cat /proc/cpuinfo
spacer

################################# enable ssh ###################################
# --- check is SSH is enabled, if not, install it. 
echo "===> Changing configs..."
spacer
if service ssh status | grep -q inactive; then
    echo "===> Enabling SSH..."
    ssh-keygen -A &&
    update-rc.d ssh enable &&
    invoke-rc.d ssh start 
else
    echo "===> SSH is already enabled... Moving on"
fi
spacer

######################### Disable Wi-Fi and bluetooth #########################
# disable transmisson capability (persists after reboot, reverse with unblock command)
sudo rfkill block wifi && sudo rfkill block bluetooth # disable wifi and disable bluetooth

############################# update and ugrade ################################
#  may disable when stable version is complete
sudo apt-get -y update && sudo apt-get -y upgrade
sudo apt-get -y dist-upgrade 
sudo apt-get insatll raspi-config 

########################### install dependencies ################################
# basic installs
echo ""
echo "===> Installing basic packages..."
spacer
################################# OS TOOLS #####################################
sudo apt-get install -y whiptail # menu tool
sudo apt-get install -y figlet # pretty display in CLI
sudo apt-get install -y rrdtool # for sampling temperature
sudo apt-get install -y curl wget lynx w3m # ensure wget and curl are up to date and add lynx + w3m
# --- Nodejs for web server --- #
sudo curl -fsSL https://deb.nodesource.com/setup_17.x | bash -
sudo apt-get install -y nodejs
# --- python tools --- #
sudo pip install argparse
sudo pip install python-libnmap
############################### NETWORK TOOLS ####################################
# zenmap is not working with 64-bit OS as of 3/2/2022, there may be a solution currently
if [ $OS_ARCH = "32-bit" ]; then
  sudo apt-get install -y zenmap
else
  echo "This OS has a $ARCH architecture, zenmap can not currently be installed"
  spacer
fi
sudo apt-get install -y nmap # scanning the network
sudo apt-get install -y ndiff # comparing scans

############################## configurations #####################################
#------ Locale -------#
echo "===> Updating locale..."
sudo perl -pi -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g' /etc/locale.gen
spacer
echo "===> Changing timezone..."
sudo rm /etc/localtime
sudo ln -s /usr/share/zoneinfo/$TZ /etc/localtime
sudo rm /etc/timezone
echo $TZ > /etc/timezone
sudo timedatectl
spacer
echo "===> Timezone updated..."
spacer
echo "===> Changing keyboard to US"
sudo sed -i 's/XKBMODEL=\"\w*"/XKBMODEL=\"'$KBMODEL'\"/g' /etc/default/keyboard
sudo sed -i 's/XKBLAYOUT=\"\w*"/XKLAYOUT=\"'$KBLAYOUT'\"/g' /etc/default/keyboard
sudo sed -i 's/XKBOPTIONS=\"\w*"/XKBOPTIONS=\"'$KBMODEL'\"/g' /etc/default/keyboard
spacer
echo "===> locale updates complete..."
spacer
echo "===> Changing Wi-Fi Country to US..."
#TODO complete this config
spacer
echo "===> Changing hostname..."
sed -i 's/raspberrypi/'$HOSTNAME'/g' /etc/hostname
sed -i 's/127.0.0.1\traspberrypi/127.0.0.1\t'$HOSTNAME'/g' /etc/hosts
spacer
echo "===> Hostname changed to $HOSTNAME"
spacer
echo "===> Diabling screen blanking..."
sudo mkdir -p /etc/X11/xorg.conf.d/
sudo cp /usr/share/raspi-config/10-blanking.conf /etc/X11/xorg.conf.d/
printf "\\033[9;0]" >> /etc/issue
spacer
echo "===> Changing password..."
echo "$DEF_USER:$PASSWD" | chpasswd
spacer
echo "===> Password successfully changed..."
spacer
############################## Link files #####################################
# symlinks #TODO symlinks need to be added

############################## Clean up dirs ##################################
# remove unecessary stuff #TODO fix this with if statement 
# TODO check behavior for if files do not exist
echo "===> Building Rapinet environment..."
espacer
sudo rm -rf Bookshelf/
sudo rm -rf Documents/
sudo rm -rf Downloads/
sudo rm -rf Music/
sudo rm -rf Pictures/
sudo rm -rf Public/
sudo rm -rf Templates/
sudo rm -rf Videos/
echo "===> Cleaned out some junk..."
spacer

############################## ADDING DIRECTORIES ##################################
# make sure we are in the right dir #TODO combine and simplfy
echo "===> Adding some directories..."
sudo mkdir -p raspinet/bin && 
sudo mkdir raspinet/discovery &&
sudo mkdir raspinet/discovery/hosts && 
sudo mkdir raspinet/discovery/ports &&
sudo mkdir raspinet/discovery/services
sudo chmod 777 raspinet &&
sudo chmod 777 raspinet/bin &&
sudo chmod 777 raspinet/discovery &&
sudo chmod 777 raspinet/discovery/hosts &&
sudo chmod 777 raspinet/discovery/ports &&
sudo chmod 777 raspinet/discovery/services
spacer
############################# SCRIPT INSTALLS ####################################
echo "===> Getting some scripts..."
# bin folder
sudo wget https://raw.githubusercontent.com/GaryDeco/Raspinet/main/raspinet/bin/filemanager
sleep 1
sudo wget https://raw.githubusercontent.com/GaryDeco/Raspinet/main/raspinet/bin/linker
sleep 1
sudo wget https://raw.githubusercontent.com/GaryDeco/Raspinet/main/raspinet/bin/piscan.sh
spacer
echo "===> Raspinet scripts installed..."
spacer

######################### FILE RELOCATION AND PERMISSIONS #######################
echo "===> Relocating files..."
spacer
# --- move files and give permissions --- #
sudo mv filemanager raspinet/bin/
sudo chmod 777 raspinet/bin/filemanager
sudo mv linker raspinet/bin/
sudo chmod 777 raspinet/bin/linker
sudo mv piscan.sh raspinet/bin/
sudo chmod 777 raspinet/bin/piscan.sh
sleep 1
echo "===> Files relocated..."
spacer

# --- discovery folder --- #
#TODO Add scripts
echo "===> Done"
spacer

############################### End of Config ##################################
# final house keeping
echo "===> Covering tracks..."
sudo rm builder
spacer
echo "===> Done"
# reboot the system
spacer
echo "===> Installation complete..."
spacer
echo "===> Rebooting..."
spacer
sudo reboot
